// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model Branch {
  id            String @id @default(uuid())
  streetAddress String @unique
  baranggay     String
  city          String
  zipCode       Int

  province      String
  region        String
  contactNumber String

  // PKs
  users               User[]
  totalExpensesPerDay TotalExpensesPerDay[]
  inventories         Inventory[]
  orders              Order[]
  profits             Profit[]
  transactions        Transaction[]
}

model Expense {
  id                    String              @id @default(uuid())
  totalExpensesPerDay   TotalExpensesPerDay @relation(fields: [totalExpensesPerDayId], references: [id])
  totalExpensesPerDayId String
  expenseAmount         Int
  descriptionOfExpense  String
}

// Inventory
model Inventory {
  id                  String               @id @default(uuid())
  branch              Branch               @relation(fields: [branchId], references: [id])
  branchId            String
  rawMaterial         RawMaterial          @relation(fields: [rawMaterialId], references: [id])
  rawMaterialId       String
  quantityInUnit      Int
  stockQuantity       Int
  isReorderNeeded     Boolean
  batches             Batch[]
  systemNotifications SystemNotification[]
}

// Orders

model Order {
  id             String        @id @default(uuid())
  orderedAt      DateTime      @default(now())
  branchId       String
  userId         String
  customerNumber Int           @default(autoincrement())
  totalPrice     Int           @default(0)
  orderStatus    Boolean       @default(false)
  branch         Branch        @relation(fields: [branchId], references: [id])
  user           User          @relation(fields: [userId], references: [id])
  orderItems     OrderItem[]
  transactions   Transaction[]
}

model OrderItem {
  id String @id @default(uuid())

  order          Order   @relation(fields: [orderId], references: [id])
  orderId        String
  product        Product @relation(fields: [productId], references: [id])
  productId      String
  quantity       Int
  quantityAmount Int // Total price, quantity * productPrice
}

// Product Catergory
model Category {
  id           String    @id @default(uuid())
  categoryName String
  products     Product[]
}

// Product
model Product {
  id          String      @id @default(uuid())
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  String
  productName String
  price       Int
  description String?
  createdAt   DateTime    @default(now())
  recipes     Recipe[]
  orderItems  OrderItem[]
}

// Profit

model Profit {
  id                    String              @id @default(uuid())
  totalExpensesPerDay   TotalExpensesPerDay @relation(fields: [totalExpensesPerDayId], references: [id])
  totalExpensesPerDayId String
  branch                Branch              @relation(fields: [brachId], references: [id])
  brachId               String
  days                  Int
  date                  DateTime
  dailySales            Int
  dailyProfit           Int
}

// RawMaterial

model RawMaterial {
  id                    String      @id @default(uuid())
  materialName          String
  quantityInUnitPerItem Int
  rawPrice              Int
  inventores            Inventory[]
  recipes               Recipe[]
}

// Recipe

model Recipe {
  id                      String      @id @default(uuid())
  product                 Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId               String
  rawMaterial             RawMaterial @relation(fields: [rawMaterialId], references: [id])
  rawMaterialId           String
  quantityInUnitPcsNeeded Int
  rawCost                 Int         @default(0)
}

// Role
model Role {
  id       String @id @default(uuid())
  roleName String
  users    User[]
}

model TotalExpensesPerDay {
  id            String    @id @default(uuid())
  branch        Branch    @relation(fields: [branchId], references: [id])
  branchId      String
  days          Int
  date          DateTime
  totalExpenses Int
  expenses      Expense[]
  profits       Profit[]
}

model Transaction {
  id              String   @id @default(uuid())
  order           Order    @relation(fields: [orderId], references: [id])
  orderId         String
  branch          Branch   @relation(fields: [branchId], references: [id])
  branchId        String
  paymentMethod   String
  amountPaid      Int
  transactionDate DateTime @default(now())
}

model User {
  id        String  @id @default(uuid())
  role      Role    @relation(fields: [roleId], references: [id])
  roleId    String
  branch    Branch  @relation(fields: [branchId], references: [id])
  branchId  String
  firstname String
  lastname  String
  cpNum     String
  username  String
  password  String
  orders    Order[]
}

// Less prio table

model Batch {
  id                  String    @id @default(uuid())
  inventory           Inventory @relation(fields: [inventoryId], references: [id])
  inventoryId         String
  batchQuantity       Int
  expirationDate      DateTime
  recievedDate        DateTime
  daysUntilExpiration Int // This could generate in frontend
  notifWarning        Boolean // Triggers to true when daysUntilExpiration is < 10
  isExpired           Boolean
  isDisposed          Boolean
}

model SystemNotification {
  id               String    @id @default(uuid())
  inventory        Inventory @relation(fields: [inventoryId], references: [id])
  inventoryId      String
  notificationDate DateTime
  stauts           String
  isSolved         Boolean
}
