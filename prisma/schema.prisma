// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  // directUrl  = env("DIRECT_URL")
  extensions = [pgcrypto]
}

// Experimental
model Customer {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  firstname   String
  lastname    String
  username    String   @unique
  password    String
  email       String   @unique
  phoneNumber String?
  createdAt   DateTime @default(now())
  orders      Order[]
}

// Inventory
model Inventory {
  id                  String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  rawMaterial         RawMaterial          @relation(fields: [rawMaterialId], references: [id])
  rawMaterialId       String               @db.Uuid
  quantityInUnit      Int
  stockQuantity       Int
  isReorderNeeded     Boolean
  batches             Batch[]
  systemNotifications SystemNotification[]
}

// Orders

model Order {
  id             String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orderedAt      DateTime      @default(now())
  employeeId     String        @db.Uuid
  customerId     String?       @db.Uuid
  customerNumber Int?          @default(autoincrement())
  totalPrice     Float         @default(0)
  orderStatus    Boolean       @default(false)
  customer       Customer?     @relation(fields: [customerId], references: [id])
  employee       Employee      @relation(fields: [employeeId], references: [id])
  orderItems     OrderItem[]
  transactions   Transaction[]
}

model OrderItem {
  id             String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  order          Order   @relation(fields: [orderId], references: [id])
  orderId        String  @db.Uuid
  product        Product @relation(fields: [productId], references: [id])
  productId      String  @db.Uuid
  quantity       Int
  quantityAmount Float // Total price, 
  // quantity * productPrice
}

// Product Catergory
model Category {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  categoryName String
  products     Product[]
  // createdAt    DateTime  @default(now())
}

// Product
model Product {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  String      @db.Uuid
  imagePath   String?
  productName String
  price       Float
  description String?
  createdAt   DateTime    @default(now())
  recipes     Recipe[]
  orderItems  OrderItem[]
}

// Profit

model Sales {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date       DateTime
  dailySales Float
}

// RawMaterial

model RawMaterial {
  id                    String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  materialName          String
  quantityInUnitPerItem Int
  rawPrice              Float
  inventores            Inventory[]
  recipes               Recipe[]
}

// Recipe

model Recipe {
  id                      String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  product                 Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId               String      @db.Uuid
  rawMaterial             RawMaterial @relation(fields: [rawMaterialId], references: [id])
  rawMaterialId           String      @db.Uuid
  quantityInUnitPcsNeeded Int
  rawCost                 Float       @default(0)
}

// Role
model Role {
  id        String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  roleName  String
  employees Employee[]
}

model Transaction {
  id            String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  order         Order  @relation(fields: [orderId], references: [id])
  orderId       String @db.Uuid
  paymentMethod String
  totalAmount   Float

  totalTendered Float
  change        Float
  vatAmount     Float?
  vatableSales  Float?

  transactionDate DateTime @default(now())
}

// model Tax {
//   id         String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//   taxPercent Float
// }

model Employee {
  id        String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  role      Role    @relation(fields: [roleId], references: [id])
  roleId    String  @db.Uuid
  imagePath String?
  firstname String
  lastname  String
  cpNum     String
  username  String
  password  String
  orders    Order[]
}

model Batch {
  id                  String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  inventory           Inventory @relation(fields: [inventoryId], references: [id])
  inventoryId         String    @db.Uuid
  batchQuantity       Int
  expirationDate      DateTime
  recievedDate        DateTime
  daysUntilExpiration Int // This could generate in frontend
  notifWarning        Boolean // Triggers to true when daysUntilExpiration is < 10
  isExpired           Boolean
  isDisposed          Boolean
}

model SystemNotification {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  inventory        Inventory @relation(fields: [inventoryId], references: [id])
  inventoryId      String    @db.Uuid
  notificationDate DateTime
  stauts           String
  isSolved         Boolean
  createdAt        DateTime  @default(now())
}
