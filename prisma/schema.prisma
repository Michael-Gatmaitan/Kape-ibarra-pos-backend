// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  // directUrl  = env("DIRECT_URL")
  extensions = [pgcrypto]
}

// Experimental
model Customer {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  firstname   String
  lastname    String
  username    String     @unique
  password    String
  email       String?    @unique
  gender      String
  phoneNumber String?
  createdAt   DateTime   @default(now())
  orders      Order[]
  AuditLog    AuditLog[]
}

// Inventory
model Inventory {
  id                  String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  rawMaterial         RawMaterial          @relation(fields: [rawMaterialId], references: [id])
  rawMaterialId       String               @db.Uuid
  stockQuantity       Int
  quantityInUnit      Int
  reorderLevel        Int
  isReorderNeeded     Boolean
  batches             Batch[]
  systemNotifications SystemNotification[]
}

// Orders

model Order {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orderedAt         DateTime @default(now())
  employeeId        String   @db.Uuid
  customerId        String?  @db.Uuid
  customerNumber    Int?     @default(autoincrement())
  totalPrice        Float    @default(0)
  orderStatus       String   @default("preparing") // preparing, payment pending, ready to pickup, rejected
  proofOfPaymentImg String? //
  orderType         String // 'walk-in', 'online'
  diningOption      String
  baristaId         String?  @db.Uuid

  customer Customer? @relation(fields: [customerId], references: [id])
  employee Employee  @relation(fields: [employeeId], references: [id], name: "OrderEmployee", map: "fk_order_employee")
  barista  Employee? @relation(fields: [baristaId], references: [id], name: "OrderBarista", map: "fk_order_barista")

  // paymentMethod     String?
  // diningOption      String?
  orderItems   OrderItem[]
  transactions Transaction[]
  Employee     Employee      @relation(fields: [employeeId], references: [id])
}

model UserLog {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  associatedId String    @db.Uuid
  login        DateTime  @default(now())
  logout       DateTime?
}

model OrderItem {
  id                   String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  order                Order   @relation(fields: [orderId], references: [id])
  orderId              String  @db.Uuid
  product              Product @relation(fields: [productId], references: [id])
  productId            String  @db.Uuid
  recordedProductPrice Float   @default(0)
  quantity             Int
  quantityAmount       Float // Total price, 
  // quantity * productPrice
}

// AuditLog

model AuditLog {
  id         String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  employeeId String? @db.Uuid
  customerId String? @db.Uuid

  timeIn  DateTime @default(now())
  timeOut DateTime @updatedAt

  Employee Employee? @relation(fields: [employeeId], references: [id])
  Customer Customer? @relation(fields: [customerId], references: [id])
}

// Product Catergory

model Category {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  categoryName String
  products     Product[]
  // createdAt    DateTime  @default(now())
}

// Product
model Product {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  String      @db.Uuid
  imagePath   String?
  productName String
  price       Float
  description String?
  createdAt   DateTime    @default(now())
  recipes     Recipe[]
  orderItems  OrderItem[]
}

// Profit

model Sales {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date       DateTime
  dailySales Float
}

// RawMaterial

model RawMaterial {
  id                    String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  materialName          String
  quantityInUnitPerItem Int
  rawPrice              Float
  inventores            Inventory[]
  recipes               Recipe[]
  Batch                 Batch[]
}

// Recipe

model Recipe {
  id                      String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  product                 Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId               String      @db.Uuid
  rawMaterial             RawMaterial @relation(fields: [rawMaterialId], references: [id])
  rawMaterialId           String      @db.Uuid
  quantityInUnitPcsNeeded Int
}

// Role
model Role {
  id        String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  roleName  String
  employees Employee[]
}

model Transaction {
  id            String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  order         Order  @relation(fields: [orderId], references: [id])
  orderId       String @db.Uuid
  paymentMethod String
  totalAmount   Float

  totalTendered Float
  change        Float
  vatAmount     Float?
  vatableSales  Float?

  transactionDate DateTime @default(now())
}

// model Tax {
//   id         String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//   taxPercent Float
// }

model Employee {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  role        Role     @relation(fields: [roleId], references: [id])
  roleId      String   @db.Uuid
  imagePath   String?
  firstname   String
  lastname    String
  phoneNumber String
  username    String
  password    String
  createdAt   DateTime @default(now())

  orders        Order[]
  ordersManaged Order[]    @relation("OrderEmployee")
  orderPrepared Order[]    @relation("OrderBarista")
  AuditLog      AuditLog[]
}

model EWallet {
  id          String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  phoneNumber String
  name        String
}

model Batch {
  id             String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  inventory      Inventory   @relation(fields: [inventoryId], references: [id])
  inventoryId    String      @db.Uuid
  rawMaterialId  String      @db.Uuid
  rawMaterial    RawMaterial @relation(fields: [rawMaterialId], references: [id])
  batchQuantity  Int
  expirationDate DateTime
}

model SystemNotification {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  inventory        Inventory @relation(fields: [inventoryId], references: [id])
  inventoryId      String    @db.Uuid
  notificationDate DateTime
  status           String
  isSolved         Boolean
  createdAt        DateTime  @default(now())
}
